# chess.py
# Copyright 2025 Roger Marsh
# Licence: See LICENCE (BSD licence)

"""Define top level user interface to a ChessTagCQL database."""

import os
import tkinter
import tkinter.messagebox

from solentware_bind.gui.exceptionhandler import ExceptionHandler

from chesstab.gui.uci import UCI
from chesstab.gui import _chess
from chesstab.gui import eventspec

from .. import (
    APPLICATION_NAME,
    PARTIAL_POSITION_MODULE,
)
from ..core import export_game
from .chess_ui import ChessUI
from .eventspec import EventSpec
from . import help_
from .cqlinsert import CQLInsert
from . import patternengines
from ..cql import querycontainer

ExceptionHandler.set_application_name(APPLICATION_NAME)


class Chess(_chess.Chess):
    """Connect a chess database with User Interface."""

    def __init__(self, **kargs):
        """Create the database and ChessUI objects."""
        super().__init__(**kargs)
        self.show_query_engines_toplevel = None

    def _add_cql_scan_to_menu(self, menu10101):
        """Create menu specification for exporting PGN file for CQL scan."""
        accelerator = EventSpec.menu_database_export_games_cql
        menu10101.add_command(
            label=accelerator[1],
            command=self.try_command(
                self.export_all_games_for_cql_scan, menu10101
            ),
            underline=accelerator[3],
        )

    def _create_menu4_position(self, menus, menubar):
        """Create menu specification for position queries."""
        menu4 = tkinter.Menu(menubar, name="position", tearoff=False)
        menus.append(menu4)
        menubar.add_cascade(label="CQL", menu=menu4, underline=1)
        for accelerator, function in (
            (EventSpec.menu_position_partial, self._position_partial),
            (eventspec.EventSpec.menu_show, self._position_show),
            (eventspec.EventSpec.menu_hide, self._position_hide),
            (
                EventSpec.menu_position_show_query_engines,
                self._show_query_engines,
            ),
        ):
            menu4.add_command(
                label=accelerator[1],
                command=self.try_command(function, menu4),
                underline=accelerator[3],
            )
        menu4.add_separator()
        for index in (3, 1, 0):
            menu4.insert_separator(index)

    def _create_chessui_instance(self, toppane, menu7, menu8, toolbarframe):
        """Return ChessUI instance."""
        return ChessUI(
            toppane,
            statusbar=self.statusbar,
            uci=UCI(menu7, menu8),
            toolbarframe=toolbarframe,
        )

    def _help_guide(self):
        """Display brief User Guide for Chess application."""
        help_.help_guide(self.root)

    def _help_selection(self):
        """Display description of selection rules for Chess application."""
        help_.help_selection(self.root)

    def _help_file_size(self):
        """Display brief instructions for file size dialogue."""
        help_.help_file_size(self.root)

    def _help_notes(self):
        """Display technical notes about Chess application."""
        help_.help_notes(self.root)

    def _help_about(self):
        """Display information about Chess application."""
        help_.help_about(self.root)

    @staticmethod
    def _get_partial_position_module_name(enginename):
        """Do nothing.  Subclasses must return a module name."""
        return PARTIAL_POSITION_MODULE[enginename]

    def _create_cql_display_insert_instance(self):
        """Return a ..gui.cqlinsert.CQLInsert instance."""
        return CQLInsert(
            master=self.ui.view_partials_pw,
            ui=self.ui,
            items_manager=self.ui.partial_items,
            itemgrid=self.ui.partial_games,
            opendatabase=self.ui.database,
            query_container_class=querycontainer.QueryContainer,
        )

    def export_all_games_for_cql_scan(self):
        """Export all database games in a PGN import format for CQL scan.

        The file is output as a sibling of the database file with name
        generated by appending '-cql-scan.pgn' to database file name.

        """
        pgn_mirror = "".join(
            (
                self.opendatabase.database_file,
                "-",
                os.path.basename(self.opendatabase.database_file),
                ".pgn",
            )
        )
        if os.path.exists(pgn_mirror):
            if not os.path.isfile(pgn_mirror):
                tkinter.messagebox.showinfo(
                    parent=self._get_toplevel(),
                    message="".join(
                        (
                            pgn_mirror,
                            " already exists but is not a file",
                        )
                    ),
                    title="Export games for CQL scan",
                )
                return
            dlg = tkinter.messagebox.askquestion(
                parent=self._get_toplevel(),
                title="Export games for CQL scan",
                message="".join(
                    (
                        pgn_mirror,
                        "\n\nalready exists\n\nIt is usually correct to",
                        " overwrite because old data in this file can",
                        " cause inconsistent answers to queries",
                    )
                ),
            )
            if dlg != tkinter.messagebox.YES:
                return
        self.ui.export_report(
            export_game.export_all_games_for_cql_scan(
                self.opendatabase,
                pgn_mirror,
            ),
            "Games (CQL scan format)",
        )
        tkinter.messagebox.showinfo(
            parent=self._get_toplevel(),
            message="".join(
                (
                    "Output to \n\n",
                    pgn_mirror,
                    "\n\ncompleted",
                )
            ),
            title="Export games for CQL scan",
        )

    def _show_query_engines(self):
        """Show list of CQL query engines available."""
        if self.opendatabase is None:
            tkinter.messagebox.showinfo(
                parent=self._get_toplevel(),
                title="Show",
                message="No chess database open",
            )
            return
        if self.show_query_engines_toplevel is not None:
            tkinter.messagebox.showinfo(
                parent=self._get_toplevel(),
                title="Show Query Engines",
                message="".join(
                    (
                        "A show query engines dialogue is already active:",
                        "\n\nCannot start another one.",
                    )
                ),
            )
            return
        self.show_query_engines_toplevel = patternengines.PatternEngines(self)
        self.show_query_engines_toplevel.populate_widget()
